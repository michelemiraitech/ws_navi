[project]
name = "vehicle-navigation"
version = "1.0.0"
description = "ROS 2 Vehicle Navigation System with GPS, IMU, and Nav2"
authors = [
    {name = "Vehicle Team", email = "user@example.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.12"

dependencies = [
    # Core scientific computing
    "numpy>=1.24.0",
    "scipy>=1.10.0",

    # NOTE: ROS 2 Python packages (rclpy, std-msgs, etc.) are NOT included here
    # They are installed via rosdep/apt and accessed through system Python path
    # The virtual environment will use --system-site-packages to access them

    # GPS and coordinate conversion
    "pyproj>=3.4.0",
    "geopy>=2.3.0",
    "utm>=0.7.0",

    # Data processing and analysis
    "pandas>=2.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",

    # Configuration and utilities
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",

    # Math and transformations
    "transforms3d>=0.4.1",

    # Testing and development
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.0.290",
    "mypy>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

simulation = [
    # NOTE: gazebo-msgs and cv-bridge are ROS packages, not PyPI packages
    # They will be available through system site packages
    "opencv-python>=4.7.0",
]

machine-learning = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "scikit-learn>=1.3.0",
    "tensorboard>=2.13.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Enable essential rules for code quality
select = ["E", "F", "W", "I", "UP", "B", "C4", "SIM", "RUF"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "install",
    "log",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12+.
target-version = "py312"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",     # Don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

# ROS launch files have different conventions
"**/launch/*.py" = [
    "T201",    # print statements are ok in launch files
    "S603",    # subprocess without shell=True is ok
    "S607",    # subprocess calls are ok
]

# Setup and utility scripts
"setup.py" = ["D100", "D103"]
"**/setup.py" = ["D100", "D103"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src --cov-report=html --cov-report=term-missing"
